\BOOKMARK [0][]{chapter.1}{1 Introduction}{}% 1
\BOOKMARK [1][]{section.1.1}{1.1 Strict vs. Relaxed Consistency}{chapter.1}% 2
\BOOKMARK [1][]{section.1.2}{1.2 Avoiding Coherence Messaging}{chapter.1}% 3
\BOOKMARK [1][]{section.1.3}{1.3 Reducing Side-Channel Leakage}{chapter.1}% 4
\BOOKMARK [1][]{section.1.4}{1.4 Contributions}{chapter.1}% 5
\BOOKMARK [1][]{section.1.5}{1.5 Dissertation Overview}{chapter.1}% 6
\BOOKMARK [0][]{chapter.2}{2 Background}{}% 7
\BOOKMARK [1][]{section.2.1}{2.1 Software Directed Coherence}{chapter.2}% 8
\BOOKMARK [1][]{section.2.2}{2.2 Directory-Based Coherence}{chapter.2}% 9
\BOOKMARK [1][]{section.2.3}{2.3 Time-Based Coherence}{chapter.2}% 10
\BOOKMARK [2][]{subsection.2.3.1}{2.3.1 Early Research}{section.2.3}% 11
\BOOKMARK [2][]{subsection.2.3.2}{2.3.2 Compiler-based Approach}{section.2.3}% 12
\BOOKMARK [2][]{subsection.2.3.3}{2.3.3 Hardware-assisted Approach}{section.2.3}% 13
\BOOKMARK [2][]{subsection.2.3.4}{2.3.4 Lamport Clocks}{section.2.3}% 14
\BOOKMARK [1][]{section.2.4}{2.4 Memory Consistency}{chapter.2}% 15
\BOOKMARK [2][]{subsection.2.4.1}{2.4.1 Memory Consistency Trace Format}{section.2.4}% 16
\BOOKMARK [2][]{subsection.2.4.2}{2.4.2 Defining Memory Consistency}{section.2.4}% 17
\BOOKMARK [3][]{subsubsection.2.4.2.1}{2.4.2.1 Sequential Consistency}{subsection.2.4.2}% 18
\BOOKMARK [3][]{subsubsection.2.4.2.2}{2.4.2.2 Total Store Order}{subsection.2.4.2}% 19
\BOOKMARK [3][]{subsubsection.2.4.2.3}{2.4.2.3 Partial Store Order}{subsection.2.4.2}% 20
\BOOKMARK [3][]{subsubsection.2.4.2.4}{2.4.2.4 Relaxed Memory Order}{subsection.2.4.2}% 21
\BOOKMARK [1][]{section.2.5}{2.5 Cache Side-Channel Attacks}{chapter.2}% 22
\BOOKMARK [2][]{subsection.2.5.1}{2.5.1 Cryptography and SCAs}{section.2.5}% 23
\BOOKMARK [2][]{subsection.2.5.2}{2.5.2 SCA Mitigation}{section.2.5}% 24
\BOOKMARK [2][]{subsection.2.5.3}{2.5.3 SCA Analysis Tools}{section.2.5}% 25
\BOOKMARK [1][]{section.2.6}{2.6 Summary}{chapter.2}% 26
\BOOKMARK [0][]{chapter.3}{3 BERI Multiprocessor Architecture}{}% 27
\BOOKMARK [1][]{section.3.1}{3.1 BERI Architecture}{chapter.3}% 28
\BOOKMARK [1][]{section.3.2}{3.2 Bluespec System Verilog}{chapter.3}% 29
\BOOKMARK [1][]{section.3.3}{3.3 Multiprocessor BERI Design}{chapter.3}% 30
\BOOKMARK [2][]{subsection.3.3.1}{3.3.1 Memory Modification}{section.3.3}% 31
\BOOKMARK [2][]{subsection.3.3.2}{3.3.2 Core Identification}{section.3.3}% 32
\BOOKMARK [2][]{subsection.3.3.3}{3.3.3 Interrupt Delivery}{section.3.3}% 33
\BOOKMARK [2][]{subsection.3.3.4}{3.3.4 Load Linked and Store Conditional}{section.3.3}% 34
\BOOKMARK [1][]{section.3.4}{3.4 FPGA Implementation}{chapter.3}% 35
\BOOKMARK [1][]{section.3.5}{3.5 Testing and Debugging}{chapter.3}% 36
\BOOKMARK [2][]{subsection.3.5.1}{3.5.1 Hardware and Software Tracing}{section.3.5}% 37
\BOOKMARK [2][]{subsection.3.5.2}{3.5.2 Cheritest}{section.3.5}% 38
\BOOKMARK [2][]{subsection.3.5.3}{3.5.3 Bare Metal Tests}{section.3.5}% 39
\BOOKMARK [2][]{subsection.3.5.4}{3.5.4 CHERI Litmus Tests}{section.3.5}% 40
\BOOKMARK [2][]{subsection.3.5.5}{3.5.5 Memory Consistency Checker}{section.3.5}% 41
\BOOKMARK [2][]{subsection.3.5.6}{3.5.6 Benchmarks on FreeBSD}{section.3.5}% 42
\BOOKMARK [1][]{section.3.6}{3.6 Summary}{chapter.3}% 43
\BOOKMARK [0][]{chapter.4}{4 BERI Coherence Models}{}% 44
\BOOKMARK [1][]{section.4.1}{4.1 BERI Time-Based Coherence}{chapter.4}% 45
\BOOKMARK [2][]{subsection.4.1.1}{4.1.1 Time Counter}{section.4.1}% 46
\BOOKMARK [2][]{subsection.4.1.2}{4.1.2 Tag Time Stamp}{section.4.1}% 47
\BOOKMARK [2][]{subsection.4.1.3}{4.1.3 Time-out Selection}{section.4.1}% 48
\BOOKMARK [2][]{subsection.4.1.4}{4.1.4 TTS Memory Overhead}{section.4.1}% 49
\BOOKMARK [2][]{subsection.4.1.5}{4.1.5 SYNC Instruction Behaviour}{section.4.1}% 50
\BOOKMARK [2][]{subsection.4.1.6}{4.1.6 Polling Detection Mechanism}{section.4.1}% 51
\BOOKMARK [2][]{subsection.4.1.7}{4.1.7 SYNC-Only Coherence}{section.4.1}% 52
\BOOKMARK [1][]{section.4.2}{4.2 BERI Directory Coherence}{chapter.4}% 53
\BOOKMARK [2][]{subsection.4.2.1}{4.2.1 Data Cache Structure}{section.4.2}% 54
\BOOKMARK [2][]{subsection.4.2.2}{4.2.2 Last Level Cache Structure}{section.4.2}% 55
\BOOKMARK [1][]{section.4.3}{4.3 Comparative Cache Design}{chapter.4}% 56
\BOOKMARK [1][]{section.4.4}{4.4 Coherence Hardware Overhead Comparison}{chapter.4}% 57
\BOOKMARK [1][]{section.4.5}{4.5 Application of Time-Based Coherence }{chapter.4}% 58
\BOOKMARK [0][]{chapter.5}{5 Memory Consistency Verification}{}% 59
\BOOKMARK [1][]{section.5.1}{5.1 BERI Time-Based Coherence}{chapter.5}% 60
\BOOKMARK [2][]{subsection.5.1.1}{5.1.1 Observable Relaxed Behaviour}{section.5.1}% 61
\BOOKMARK [2][]{subsection.5.1.2}{5.1.2 Non-Observable Relaxed Behaviour}{section.5.1}% 62
\BOOKMARK [2][]{subsection.5.1.3}{5.1.3 Forbidden Behaviour}{section.5.1}% 63
\BOOKMARK [2][]{subsection.5.1.4}{5.1.4 CHERI Litmus Tests}{section.5.1}% 64
\BOOKMARK [2][]{subsection.5.1.5}{5.1.5 AXE Trace Evaluation}{section.5.1}% 65
\BOOKMARK [3][]{subsubsection.5.1.5.1}{5.1.5.1 Sequential Consistency Test}{subsection.5.1.5}% 66
\BOOKMARK [3][]{subsubsection.5.1.5.2}{5.1.5.2 Total Store Order Consistency Test}{subsection.5.1.5}% 67
\BOOKMARK [3][]{subsubsection.5.1.5.3}{5.1.5.3 Partial Store Order Consistency Test}{subsection.5.1.5}% 68
\BOOKMARK [2][]{subsection.5.1.6}{5.1.6 Regression Testing}{section.5.1}% 69
\BOOKMARK [1][]{section.5.2}{5.2 BERI Directory Coherence}{chapter.5}% 70
\BOOKMARK [2][]{subsection.5.2.1}{5.2.1 AXE Trace Evaluation}{section.5.2}% 71
\BOOKMARK [2][]{subsection.5.2.2}{5.2.2 Regression Testing}{section.5.2}% 72
\BOOKMARK [1][]{section.5.3}{5.3 General Performance Evaluation Using Litmus}{chapter.5}% 73
\BOOKMARK [0][]{chapter.6}{6 Coherence Results and Evaluation}{}% 74
\BOOKMARK [1][]{section.6.1}{6.1 Splash-2 Benchmarks}{chapter.6}% 75
\BOOKMARK [1][]{section.6.2}{6.2 Effects of Time-outs on Performance}{chapter.6}% 76
\BOOKMARK [1][]{section.6.3}{6.3 Optimising Time-Based Coherence}{chapter.6}% 77
\BOOKMARK [1][]{section.6.4}{6.4 Extended Splash-2 Comparison}{chapter.6}% 78
\BOOKMARK [1][]{section.6.5}{6.5 Effects of Cache Size on Performance}{chapter.6}% 79
\BOOKMARK [1][]{section.6.6}{6.6 Evaluating FreeBSD Commands}{chapter.6}% 80
\BOOKMARK [2][]{subsection.6.6.1}{6.6.1 DD}{section.6.6}% 81
\BOOKMARK [2][]{subsection.6.6.2}{6.6.2 CP}{section.6.6}% 82
\BOOKMARK [2][]{subsection.6.6.3}{6.6.3 GREP}{section.6.6}% 83
\BOOKMARK [2][]{subsection.6.6.4}{6.6.4 MD5}{section.6.6}% 84
\BOOKMARK [2][]{subsection.6.6.5}{6.6.5 SHA-256}{section.6.6}% 85
\BOOKMARK [1][]{section.6.7}{6.7 Communication Energy Estimation}{chapter.6}% 86
\BOOKMARK [2][]{subsection.6.7.1}{6.7.1 Parallel Execution}{section.6.7}% 87
\BOOKMARK [2][]{subsection.6.7.2}{6.7.2 Independent Concurrent Execution}{section.6.7}% 88
\BOOKMARK [1][]{section.6.8}{6.8 Simplicity}{chapter.6}% 89
\BOOKMARK [1][]{section.6.9}{6.9 Scalability Estimation}{chapter.6}% 90
\BOOKMARK [1][]{section.6.10}{6.10 Conclusion}{chapter.6}% 91
\BOOKMARK [0][]{chapter.7}{7 Cache Side-Channel Attacks}{}% 92
\BOOKMARK [1][]{section.7.1}{7.1 Effects of Coherence on SCAs}{chapter.7}% 93
\BOOKMARK [1][]{section.7.2}{7.2 SCAs on CHERI}{chapter.7}% 94
\BOOKMARK [2][]{subsection.7.2.1}{7.2.1 Cryptography and SCAs}{section.7.2}% 95
\BOOKMARK [2][]{subsection.7.2.2}{7.2.2 State of the art SCA Mitigation}{section.7.2}% 96
\BOOKMARK [2][]{subsection.7.2.3}{7.2.3 Exploiting Time-Based Coherence for SCA Mitigation}{section.7.2}% 97
\BOOKMARK [1][]{section.7.3}{7.3 BERI SCA Analysis}{chapter.7}% 98
\BOOKMARK [2][]{subsection.7.3.1}{7.3.1 Memory Footprint Analysis}{section.7.3}% 99
\BOOKMARK [2][]{subsection.7.3.2}{7.3.2 Effects of Coherence on SCAs}{section.7.3}% 100
\BOOKMARK [3][]{subsubsection.7.3.2.1}{7.3.2.1 Directory Coherence \205 SCA}{subsection.7.3.2}% 101
\BOOKMARK [3][]{subsubsection.7.3.2.2}{7.3.2.2 Time-Based Coherence \205 SCA}{subsection.7.3.2}% 102
\BOOKMARK [1][]{section.7.4}{7.4 Experimental Set-Up}{chapter.7}% 103
\BOOKMARK [1][]{section.7.5}{7.5 Bare Metal Testing}{chapter.7}% 104
\BOOKMARK [2][]{subsection.7.5.1}{7.5.1 Collocated Tests}{section.7.5}% 105
\BOOKMARK [3][]{subsubsection.7.5.1.1}{7.5.1.1 Results}{subsection.7.5.1}% 106
\BOOKMARK [3][]{subsubsection.7.5.1.2}{7.5.1.2 Evaluation}{subsection.7.5.1}% 107
\BOOKMARK [2][]{subsection.7.5.2}{7.5.2 Distributed Tests}{section.7.5}% 108
\BOOKMARK [3][]{subsubsection.7.5.2.1}{7.5.2.1 Results and Evaluation}{subsection.7.5.2}% 109
\BOOKMARK [1][]{section.7.6}{7.6 SCA Testing including an OS}{chapter.7}% 110
\BOOKMARK [1][]{section.7.7}{7.7 Protection Level of Time-Based Coherence}{chapter.7}% 111
\BOOKMARK [2][]{subsection.7.7.1}{7.7.1 Protecting LLC}{section.7.7}% 112
\BOOKMARK [1][]{section.7.8}{7.8 Further Research}{chapter.7}% 113
\BOOKMARK [1][]{section.7.9}{7.9 Conclusion}{chapter.7}% 114
\BOOKMARK [0][]{chapter.8}{8 Conclusions and Future Research}{}% 115
\BOOKMARK [1][]{section.8.1}{8.1 Field Contributions}{chapter.8}% 116
\BOOKMARK [1][]{section.8.2}{8.2 Engineering Contributions}{chapter.8}% 117
\BOOKMARK [1][]{section.8.3}{8.3 Further Research}{chapter.8}% 118
\BOOKMARK [2][]{subsection.8.3.1}{8.3.1 Capability Enhancement of Time-Based Coherence}{section.8.3}% 119
\BOOKMARK [2][]{subsection.8.3.2}{8.3.2 Scalability}{section.8.3}% 120
\BOOKMARK [2][]{subsection.8.3.3}{8.3.3 Cache Configurations}{section.8.3}% 121
\BOOKMARK [1][]{section.8.4}{8.4 SCA Research Directions}{chapter.8}% 122
\BOOKMARK [0][]{section.8.4}{References}{}% 123
